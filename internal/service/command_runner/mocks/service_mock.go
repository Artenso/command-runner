// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=./mocks/service_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	os "os"
	exec "os/exec"
	reflect "reflect"

	model "github.com/Artenso/command-runner/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockICommandsRepository is a mock of ICommandsRepository interface.
type MockICommandsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICommandsRepositoryMockRecorder
}

// MockICommandsRepositoryMockRecorder is the mock recorder for MockICommandsRepository.
type MockICommandsRepositoryMockRecorder struct {
	mock *MockICommandsRepository
}

// NewMockICommandsRepository creates a new mock instance.
func NewMockICommandsRepository(ctrl *gomock.Controller) *MockICommandsRepository {
	mock := &MockICommandsRepository{ctrl: ctrl}
	mock.recorder = &MockICommandsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICommandsRepository) EXPECT() *MockICommandsRepositoryMockRecorder {
	return m.recorder
}

// AddCommand mocks base method.
func (m *MockICommandsRepository) AddCommand(ctx context.Context, command string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCommand", ctx, command)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCommand indicates an expected call of AddCommand.
func (mr *MockICommandsRepositoryMockRecorder) AddCommand(ctx, command any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCommand", reflect.TypeOf((*MockICommandsRepository)(nil).AddCommand), ctx, command)
}

// GetCommand mocks base method.
func (m *MockICommandsRepository) GetCommand(ctx context.Context, id int64) (*model.Command, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommand", ctx, id)
	ret0, _ := ret[0].(*model.Command)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommand indicates an expected call of GetCommand.
func (mr *MockICommandsRepositoryMockRecorder) GetCommand(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommand", reflect.TypeOf((*MockICommandsRepository)(nil).GetCommand), ctx, id)
}

// ListCommand mocks base method.
func (m *MockICommandsRepository) ListCommand(ctx context.Context, limit, offset int64) ([]*model.Command, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommand", ctx, limit, offset)
	ret0, _ := ret[0].([]*model.Command)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommand indicates an expected call of ListCommand.
func (mr *MockICommandsRepositoryMockRecorder) ListCommand(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommand", reflect.TypeOf((*MockICommandsRepository)(nil).ListCommand), ctx, limit, offset)
}

// StopCommand mocks base method.
func (m *MockICommandsRepository) StopCommand(ctx context.Context, id int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopCommand", ctx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopCommand indicates an expected call of StopCommand.
func (mr *MockICommandsRepositoryMockRecorder) StopCommand(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCommand", reflect.TypeOf((*MockICommandsRepository)(nil).StopCommand), ctx, id)
}

// UpdateCommand mocks base method.
func (m *MockICommandsRepository) UpdateCommand(ctx context.Context, id int64, cmdInfo *model.CommandInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCommand", ctx, id, cmdInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCommand indicates an expected call of UpdateCommand.
func (mr *MockICommandsRepositoryMockRecorder) UpdateCommand(ctx, id, cmdInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCommand", reflect.TypeOf((*MockICommandsRepository)(nil).UpdateCommand), ctx, id, cmdInfo)
}

// MockISystemCaller is a mock of ISystemCaller interface.
type MockISystemCaller struct {
	ctrl     *gomock.Controller
	recorder *MockISystemCallerMockRecorder
}

// MockISystemCallerMockRecorder is the mock recorder for MockISystemCaller.
type MockISystemCallerMockRecorder struct {
	mock *MockISystemCaller
}

// NewMockISystemCaller creates a new mock instance.
func NewMockISystemCaller(ctrl *gomock.Controller) *MockISystemCaller {
	mock := &MockISystemCaller{ctrl: ctrl}
	mock.recorder = &MockISystemCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISystemCaller) EXPECT() *MockISystemCallerMockRecorder {
	return m.recorder
}

// CheckProcessExist mocks base method.
func (m *MockISystemCaller) CheckProcessExist(process *os.Process) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckProcessExist", process)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckProcessExist indicates an expected call of CheckProcessExist.
func (mr *MockISystemCallerMockRecorder) CheckProcessExist(process any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckProcessExist", reflect.TypeOf((*MockISystemCaller)(nil).CheckProcessExist), process)
}

// FindProcess mocks base method.
func (m *MockISystemCaller) FindProcess(pid int64) (*os.Process, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProcess", pid)
	ret0, _ := ret[0].(*os.Process)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProcess indicates an expected call of FindProcess.
func (mr *MockISystemCallerMockRecorder) FindProcess(pid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProcess", reflect.TypeOf((*MockISystemCaller)(nil).FindProcess), pid)
}

// GetPid mocks base method.
func (m *MockISystemCaller) GetPid(cmd *exec.Cmd) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPid", cmd)
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetPid indicates an expected call of GetPid.
func (mr *MockISystemCallerMockRecorder) GetPid(cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPid", reflect.TypeOf((*MockISystemCaller)(nil).GetPid), cmd)
}

// IsProcessComplete mocks base method.
func (m *MockISystemCaller) IsProcessComplete(cmd *exec.Cmd) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsProcessComplete", cmd)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsProcessComplete indicates an expected call of IsProcessComplete.
func (mr *MockISystemCallerMockRecorder) IsProcessComplete(cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsProcessComplete", reflect.TypeOf((*MockISystemCaller)(nil).IsProcessComplete), cmd)
}

// IsProcessKilled mocks base method.
func (m *MockISystemCaller) IsProcessKilled(cmd *exec.Cmd) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsProcessKilled", cmd)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsProcessKilled indicates an expected call of IsProcessKilled.
func (mr *MockISystemCallerMockRecorder) IsProcessKilled(cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsProcessKilled", reflect.TypeOf((*MockISystemCaller)(nil).IsProcessKilled), cmd)
}

// KillProcess mocks base method.
func (m *MockISystemCaller) KillProcess(process *os.Process) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KillProcess", process)
	ret0, _ := ret[0].(error)
	return ret0
}

// KillProcess indicates an expected call of KillProcess.
func (mr *MockISystemCallerMockRecorder) KillProcess(process any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KillProcess", reflect.TypeOf((*MockISystemCaller)(nil).KillProcess), process)
}

// StartCmd mocks base method.
func (m *MockISystemCaller) StartCmd(cmd *exec.Cmd) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCmd", cmd)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartCmd indicates an expected call of StartCmd.
func (mr *MockISystemCallerMockRecorder) StartCmd(cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCmd", reflect.TypeOf((*MockISystemCaller)(nil).StartCmd), cmd)
}

// WaitCmd mocks base method.
func (m *MockISystemCaller) WaitCmd(cmd *exec.Cmd) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitCmd", cmd)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitCmd indicates an expected call of WaitCmd.
func (mr *MockISystemCallerMockRecorder) WaitCmd(cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitCmd", reflect.TypeOf((*MockISystemCaller)(nil).WaitCmd), cmd)
}
