// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: command_runner.proto

package command_runner

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddCommandRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddCommandRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddCommandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddCommandRequestMultiError, or nil if none found.
func (m *AddCommandRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddCommandRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCommand()) < 2 {
		err := AddCommandRequestValidationError{
			field:  "Command",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddCommandRequestMultiError(errors)
	}

	return nil
}

// AddCommandRequestMultiError is an error wrapping multiple validation errors
// returned by AddCommandRequest.ValidateAll() if the designated constraints
// aren't met.
type AddCommandRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddCommandRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddCommandRequestMultiError) AllErrors() []error { return m }

// AddCommandRequestValidationError is the validation error returned by
// AddCommandRequest.Validate if the designated constraints aren't met.
type AddCommandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCommandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCommandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCommandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCommandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCommandRequestValidationError) ErrorName() string {
	return "AddCommandRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddCommandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCommandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCommandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCommandRequestValidationError{}

// Validate checks the field values on AddCommandResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddCommandResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddCommandResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddCommandResponseMultiError, or nil if none found.
func (m *AddCommandResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddCommandResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddCommandResponseMultiError(errors)
	}

	return nil
}

// AddCommandResponseMultiError is an error wrapping multiple validation errors
// returned by AddCommandResponse.ValidateAll() if the designated constraints
// aren't met.
type AddCommandResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddCommandResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddCommandResponseMultiError) AllErrors() []error { return m }

// AddCommandResponseValidationError is the validation error returned by
// AddCommandResponse.Validate if the designated constraints aren't met.
type AddCommandResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCommandResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCommandResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCommandResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCommandResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCommandResponseValidationError) ErrorName() string {
	return "AddCommandResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddCommandResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCommandResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCommandResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCommandResponseValidationError{}

// Validate checks the field values on GetCommandRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCommandRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommandRequestMultiError, or nil if none found.
func (m *GetCommandRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommandRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetCommandRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCommandRequestMultiError(errors)
	}

	return nil
}

// GetCommandRequestMultiError is an error wrapping multiple validation errors
// returned by GetCommandRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCommandRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommandRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommandRequestMultiError) AllErrors() []error { return m }

// GetCommandRequestValidationError is the validation error returned by
// GetCommandRequest.Validate if the designated constraints aren't met.
type GetCommandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommandRequestValidationError) ErrorName() string {
	return "GetCommandRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommandRequestValidationError{}

// Validate checks the field values on GetCommandResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommandResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommandResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommandResponseMultiError, or nil if none found.
func (m *GetCommandResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommandResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Command

	// no validation rules for Status

	// no validation rules for Output

	// no validation rules for Pid

	if len(errors) > 0 {
		return GetCommandResponseMultiError(errors)
	}

	return nil
}

// GetCommandResponseMultiError is an error wrapping multiple validation errors
// returned by GetCommandResponse.ValidateAll() if the designated constraints
// aren't met.
type GetCommandResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommandResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommandResponseMultiError) AllErrors() []error { return m }

// GetCommandResponseValidationError is the validation error returned by
// GetCommandResponse.Validate if the designated constraints aren't met.
type GetCommandResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommandResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommandResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommandResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommandResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommandResponseValidationError) ErrorName() string {
	return "GetCommandResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommandResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommandResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommandResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommandResponseValidationError{}

// Validate checks the field values on ListCommandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCommandRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCommandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCommandRequestMultiError, or nil if none found.
func (m *ListCommandRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCommandRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetLimit() <= 0 {
		err := ListCommandRequestValidationError{
			field:  "Limit",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOffset() < 0 {
		err := ListCommandRequestValidationError{
			field:  "Offset",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListCommandRequestMultiError(errors)
	}

	return nil
}

// ListCommandRequestMultiError is an error wrapping multiple validation errors
// returned by ListCommandRequest.ValidateAll() if the designated constraints
// aren't met.
type ListCommandRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCommandRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCommandRequestMultiError) AllErrors() []error { return m }

// ListCommandRequestValidationError is the validation error returned by
// ListCommandRequest.Validate if the designated constraints aren't met.
type ListCommandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommandRequestValidationError) ErrorName() string {
	return "ListCommandRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCommandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommandRequestValidationError{}

// Validate checks the field values on CommandInList with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommandInList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommandInList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommandInListMultiError, or
// nil if none found.
func (m *CommandInList) ValidateAll() error {
	return m.validate(true)
}

func (m *CommandInList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Command

	// no validation rules for Status

	// no validation rules for Pid

	if len(errors) > 0 {
		return CommandInListMultiError(errors)
	}

	return nil
}

// CommandInListMultiError is an error wrapping multiple validation errors
// returned by CommandInList.ValidateAll() if the designated constraints
// aren't met.
type CommandInListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommandInListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommandInListMultiError) AllErrors() []error { return m }

// CommandInListValidationError is the validation error returned by
// CommandInList.Validate if the designated constraints aren't met.
type CommandInListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommandInListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommandInListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommandInListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommandInListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommandInListValidationError) ErrorName() string { return "CommandInListValidationError" }

// Error satisfies the builtin error interface
func (e CommandInListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommandInList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommandInListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommandInListValidationError{}

// Validate checks the field values on ListCommandResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCommandResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCommandResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCommandResponseMultiError, or nil if none found.
func (m *ListCommandResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCommandResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCommands() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCommandResponseValidationError{
						field:  fmt.Sprintf("Commands[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCommandResponseValidationError{
						field:  fmt.Sprintf("Commands[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCommandResponseValidationError{
					field:  fmt.Sprintf("Commands[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCommandResponseMultiError(errors)
	}

	return nil
}

// ListCommandResponseMultiError is an error wrapping multiple validation
// errors returned by ListCommandResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCommandResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCommandResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCommandResponseMultiError) AllErrors() []error { return m }

// ListCommandResponseValidationError is the validation error returned by
// ListCommandResponse.Validate if the designated constraints aren't met.
type ListCommandResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommandResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommandResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommandResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommandResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommandResponseValidationError) ErrorName() string {
	return "ListCommandResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCommandResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommandResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommandResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommandResponseValidationError{}

// Validate checks the field values on StopCommandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopCommandRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopCommandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopCommandRequestMultiError, or nil if none found.
func (m *StopCommandRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StopCommandRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := StopCommandRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StopCommandRequestMultiError(errors)
	}

	return nil
}

// StopCommandRequestMultiError is an error wrapping multiple validation errors
// returned by StopCommandRequest.ValidateAll() if the designated constraints
// aren't met.
type StopCommandRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopCommandRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopCommandRequestMultiError) AllErrors() []error { return m }

// StopCommandRequestValidationError is the validation error returned by
// StopCommandRequest.Validate if the designated constraints aren't met.
type StopCommandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopCommandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopCommandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopCommandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopCommandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopCommandRequestValidationError) ErrorName() string {
	return "StopCommandRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StopCommandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopCommandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopCommandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopCommandRequestValidationError{}
